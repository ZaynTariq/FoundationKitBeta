// <auto-generated />
using System;
using FoundationKit.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoundationKit.Web.Migrations
{
    [DbContext(typeof(ApplicationDBConext))]
    partial class ApplicationDBConextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoundationKit.Authentication.Core.Entities.AccountEntities.AppRoleBase<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasDiscriminator().HasValue("AppRoleBase<long>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FoundationKit.Authentication.Core.Entities.AccountEntities.AppUserBase<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("AppUserBase<long>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FoundationKit.Authentication.Core.Entities.RoleEntities.AppModuleActionBase<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleActions");
                });

            modelBuilder.Entity("FoundationKit.Authentication.Core.Entities.RoleEntities.AppModuleBase<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("FoundationKit.Authentication.Core.Entities.RoleEntities.AppPermissionBase<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModuleActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModuleActionId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<long>("RolesId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("FoundationKit.Web.Entities.AppRole", b =>
                {
                    b.HasBaseType("FoundationKit.Authentication.Core.Entities.AccountEntities.AppRoleBase<long>");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Roles", (string)null);

                    b.HasDiscriminator().HasValue("AppRole");
                });

            modelBuilder.Entity("FoundationKit.Web.Entities.AppUser", b =>
                {
                    b.HasBaseType("FoundationKit.Authentication.Core.Entities.AccountEntities.AppUserBase<long>");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("FoundationKit.Authentication.Core.Entities.RoleEntities.AppModuleActionBase<long>", b =>
                {
                    b.HasOne("FoundationKit.Authentication.Core.Entities.RoleEntities.AppModuleBase<long>", "Module")
                        .WithMany("ModuleActions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("FoundationKit.Authentication.Core.Entities.RoleEntities.AppPermissionBase<long>", b =>
                {
                    b.HasOne("FoundationKit.Authentication.Core.Entities.RoleEntities.AppModuleActionBase<long>", "ModuleAction")
                        .WithOne("Permission")
                        .HasForeignKey("FoundationKit.Authentication.Core.Entities.RoleEntities.AppPermissionBase<long>", "ModuleActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoundationKit.Authentication.Core.Entities.AccountEntities.AppRoleBase<long>", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleAction");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("FoundationKit.Authentication.Core.Entities.AccountEntities.AppRoleBase<long>", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoundationKit.Authentication.Core.Entities.AccountEntities.AppUserBase<long>", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoundationKit.Authentication.Core.Entities.AccountEntities.AppRoleBase<long>", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("FoundationKit.Authentication.Core.Entities.RoleEntities.AppModuleActionBase<long>", b =>
                {
                    b.Navigation("Permission")
                        .IsRequired();
                });

            modelBuilder.Entity("FoundationKit.Authentication.Core.Entities.RoleEntities.AppModuleBase<long>", b =>
                {
                    b.Navigation("ModuleActions");
                });
#pragma warning restore 612, 618
        }
    }
}
